@inject IJSRuntime JSRuntime
@implements IDisposable

<MudDialog OnBackdropClick="Cancel" Class="@Class" Style="@Style">
    <TitleContent>
        @if (TitleContent != null)
        {
            @TitleContent(this)
        }
    </TitleContent>

    <DialogContent>
        @DialogContent(this)
    </DialogContent>

    <DialogActions>
        @if (DialogActions != null)
        {
            @DialogActions(this)
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] protected MudDialogInstance? MudDialog { get; set; }
    [Parameter] public RenderFragment<DialogBase>? TitleContent { get; set; } = null!;
    [Parameter] public RenderFragment<DialogBase> DialogContent { get; set; } = null!;
    [Parameter] public RenderFragment<DialogBase>? DialogActions { get; set; } = null!;
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("onOpenDialog");
    }

    public async Task Ok<T>(T result)
    {
        MudDialog?.Close(DialogResult.Ok(result));
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public async void Cancel()
    {
        MudDialog?.Cancel();
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public async void Dispose()
    {
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("onRemoveDialog");
        GC.SuppressFinalize(this);
    }
}