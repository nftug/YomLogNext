@using YomLog.Shared.Exceptions
@inject LayoutService LayoutService

<MudContainer Class="@Class">
    <MudAlert Class="mb-5" Severity="Severity" ShowCloseIcon="ErrorBoundary != null"
              CloseIconClicked="ClickedCloseButton"
              Variant="Variant.Filled">
        <MudText Typo="Typo.body2">
            @if (Exception is IApiException e)
            {
                var errorTitle = e switch
                {
                    EntityValidationException err => "不正な値です",
                    ForbiddenException err => "アクセスが禁止されています",
                    UnauthorizedException err => "認証が必要です",
                    NotFoundException err => "アイテムが見つかりません",
                    _ => "何かがおかしいです"
                };

                <b>APIエラー: @errorTitle</b>
            }
            else
            {
                <b>エラーが発生しました。</b>
            }
        </MudText>

        @if (ErrorBoundary != null)
        {
            <MudText Typo="Typo.body2">閉じるボタンを押して再試行できます。</MudText>
        }
    </MudAlert>

    @if (ShowDetails)
    {
        <MudExpansionPanels Class="mb-5" MultiExpansion="true">
            <MudExpansionPanel Text="エラー内容">
                @ErrorSummary
            </MudExpansionPanel>

            @if (Exception is IApiException e && e.Response != null)
            {
                <MudExpansionPanel Text="レスポンス内容">
                    <MudTextField T="string" Variant="Variant.Outlined" Text="@e.Response"
                                  Lines="10" ReadOnly="true" Style="font-size: var(--mud-typography-body2-size); user-select: text;" />
                </MudExpansionPanel>
            }

            <MudExpansionPanel Text="エラーの詳細">
                <MudTextField T="string" Variant="Variant.Outlined" Text="@ErrorDetails"
                              Lines="10" ReadOnly="true" Style="font-size: var(--mud-typography-body2-size); user-select: text;" />
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
</MudContainer>

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public ErrorBoundary? ErrorBoundary { get; set; }
    [Parameter] public Exception Exception { get; set; } = null!;
    [Parameter] public bool ShowDetails { get; set; } = true;
    [Parameter] public Severity Severity { get; set; } = Severity.Error;
    [Parameter] public EventCallback OnClickCloseButton { get; set; }

    private string ErrorSummary
    => Exception is IApiException e
        ? e.Response ?? e.Message ?? Exception.Message
        : Exception.Message;

    private string ErrorDetails
        => "Summary:\n"
            + $"{ErrorSummary}\n\n"
            + "Stack trace:\n"
            + $"{Exception.StackTrace}\n\n"
            + "Source:\n"
            + $"{Exception.Source}\n\n"
            + "Target site\n"
            + Exception.TargetSite;

    protected override void OnInitialized()
    {
        LayoutService.IsProcessing.Value = false;
    }

    private async Task ClickedCloseButton()
    {
        await OnClickCloseButton.InvokeAsync();
        ErrorBoundary?.Recover();
    }
}