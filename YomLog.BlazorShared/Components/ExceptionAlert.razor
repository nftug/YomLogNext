@using YomLog.Shared.Exceptions

<MudContainer Class="mt-8 mb-8">
    <MudAlert Class="mb-5" Severity="Severity" ShowCloseIcon="true"
              CloseIconClicked="(() => ErrorBoundary?.Recover())"
              Variant="Variant.Filled">
        <MudText Typo="Typo.body2">
            @if (Exception is IApiException e)
            {
                var errorTitle = e switch
                {
                    ModelErrorException err => "Invalid values",
                    ForbiddenException err => "Access forbidden",
                    UnauthorizedException err => "Unauthorized",
                    NotFoundException err => "Not found",
                    _ => "Something is wrong"
                };

                <b>API Error: @errorTitle</b>
            }
            else
            {
                <b>An unhandled error has occured.</b>
            }
        </MudText>

        <MudText Typo="Typo.body2">Click close button to recover.</MudText>
    </MudAlert>

    @if (ShowDetails)
    {
        <MudExpansionPanels Class="mb-5" MultiExpansion="true">
            <MudExpansionPanel Text="Summary">
                @ErrorSummary
            </MudExpansionPanel>
            <MudExpansionPanel Text="Details">
                <MudTextField T="string" Variant="Variant.Outlined" Text="@ErrorDetails"
                              Lines="10" ReadOnly="true" Style="font-size: var(--mud-typography-body2-size);" />
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
</MudContainer>

@code {
    [Parameter] public ErrorBoundary? ErrorBoundary { get; set; }
    [Parameter] public Exception Exception { get; set; } = null!;
    [Parameter] public bool ShowDetails { get; set; } = false;
    [Parameter] public Severity Severity { get; set; } = Severity.Error;

    private string ErrorSummary
        => Exception is IApiException e
            ? e.Message ?? e.Response ?? Exception.GetType().Name
            : $"{Exception.GetType().Name}: {Exception.Message}";

    private string ErrorDetails
        => "Summary:\n"
            + $"{ErrorSummary}\n\n"
            + "Stack trace:\n"
            + $"{Exception.StackTrace}\n\n"
            + "Source:\n"
            + $"{Exception.Source}\n\n"
            + "Target site\n"
            + Exception.TargetSite;
}