@inject IDialogService DialogService

<MudCard>
    @if (Item != null)
    {
        <MudCardContent Class="d-flex flex-grow-1 gap-2">
            <div class="flex-grow-1">
                <MudText Class="mb-1">@Item.Title</MudText>
                <ItemList Items="Item.Authors" OnClickItem="(string author) => OnClickAuthor(author)" />
            </div>
            <MudImage Src="@Item.Thumbnail" Height="128" />
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OnClickDetails">
                詳細を見る
            </MudButton>
        </MudCardActions>
    }
    else
    {
        <MudCardContent Class="d-flex flex-grow-1 gap-2">
            <div class="flex-grow-1">
                <MudSkeleton Height="30px" Class="mb-1" />
                <MudSkeleton Height="20px" />
            </div>
            <MudSkeleton Height="160px" Width="90px" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="100px" Height="20px" />
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public BookInfo? Item { get; set; } = null!;
    [Parameter] public EventCallback<string> SearchByAuthor { get; set; }

    private async Task OnClickAuthor(string author)
    {
        if (!SearchByAuthor.HasDelegate) return;
        await SearchByAuthor.InvokeAsync(author);
    }

    private Task OnClickDetails()
        => AddBookDialog.ShowDialog(DialogService, Item!, SearchByAuthor);
}