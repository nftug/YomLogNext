<MudCard Class="ma-2">
    @if (Item != null)
    {
        <MudCardContent Class="d-flex flex-grow-1 gap-2">
            <div class="flex-grow-1">
                <MudText Class="mb-1">@Item.Title</MudText>
                <MudText Typo="Typo.body2">
                    @if (Item.Authors == null)
                    {
                        @("No Author")
                        return;
                    }

                    @foreach (var (author, index) in Item.Authors.Select((item, index) => (item, index)))
                    {
                        <MudLink OnClick="(() => OnClickAuthor(author))">@author</MudLink>
                        @if (index + 1 < Item.Authors.Count)
                        {
                            <span>,&nbsp;</span>
                        }
                    }
                </MudText>
            </div>
            <MudImage Src="@Item.Thumbnail" Height="128" />
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">See Details</MudButton>
        </MudCardActions>
    }
    else
    {
        <MudCardContent Class="d-flex flex-grow-1 gap-2">
            <div class="flex-grow-1">
                <MudSkeleton Height="30px" Class="mb-1" />
                <MudSkeleton Height="20px" />
            </div>
            <MudSkeleton Height="160px" Width="90px" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="100px" Height="20px" />
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public BookInfo? Item { get; set; } = null!;
    [Parameter] public EventCallback<string> SearchByAuthor { get; set; }

    private async Task OnClickAuthor(string author)
    {
        if (!SearchByAuthor.HasDelegate) return;
        await SearchByAuthor.InvokeAsync(author);
    }
}